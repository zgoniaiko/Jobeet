<?php

namespace Zia\JobBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends EntityRepository
{
  public function getWithActiveJobsBuilder($category = null)
  {
    $builder = $this->createQueryBuilder('c')
      ->select('c, j')
      ->leftJoin('c.jobs', 'j' );
    
    $this->_em->getRepository('ZiaJobBundle:Job')->addActiveJobsQuery($builder);
    $this->addCategoryCriteria($builder, $category);
    
    return $builder;
  }

  public function addCategoryCriteria(QueryBuilder $builder, $category = null)
  {
    if (!is_null($category)) {
      if (is_numeric($category)) {
        $builder->andWhere('c.id = :category_id')
          ->setParameter('category_id', $category);
      } elseif (is_string($category)) {
        $builder->andWhere('c.slug = :category_slug')
          ->setParameter('category_slug', $category);
      } elseif ($category instanceof Category) {
        $builder->andWhere('c.id = :category_id')
          ->setParameter('category_id', $category->getId());
      } else {
        throw new \Symfony\Component\Validator\Exception\UnexpectedTypeException('Unexpected type of category');
      } 
    }
  }
  
  public function addLimit(QueryBuilder $builder, $maxResults = null)
  {
    if ($maxResults > 0) {
      $builder->setMaxResults($maxResults);
    }
  }

  public function countActiveJobs($category = null)
  {
    $builder = $this->getWithActiveJobsBuilder($category);
    
    $builder->select('c.id, COUNT(j.id) total');
    $builder->addGroupBy('c.id');
    
    $categories = $builder->getQuery()->execute();
    $num_results = array();
    foreach ($categories as $category) {
      $num_results[$category['id']] = $category['total'];
    }
    
    return $num_results;
  }
  
  public function findWithActiveJobs($maxResults = null, $category = null)
  {
    $builder = $this->getWithActiveJobsBuilder($category);
    
    $this->addLimit($builder, $maxResults);
    
    return $builder->getQuery()->getResult();    
  }
  
  public function findBySlugWithActiveJobs($maxResults = null, $category = null)
  {
    $builder = $this->getWithActiveJobsBuilder($category);
    
    $this->addLimit($builder, $maxResults);
    
    return $builder->getQuery()->getResult();    
  }
}